{"version":3,"sources":["Components/TabItem/TabItem.js","Components/Tab/Tab.js","App.js","serviceWorker.js","index.js"],"names":["TabItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","price","_this2","pricesWs","WebSocket","concat","name","toLowerCase","onmessage","msg","JSON","parse","data","setState","toFixed","_this$props","rank","capt","volume","react_default","a","createElement","className","Component","Tab","fetch","then","json","cur","sortedCur","sort","b","Number","marketCapUsd","catch","err","console","log","num","Math","round","_this3","currency","map","e","index","Components_TabItem_TabItem","key","priceUsd","roundNum","volumeUsd24Hr","App","Components_Tab_Tab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70454419.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TabItem.css';\r\n\r\nclass TabItem extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      price: this.props.price\r\n    }\r\n    \r\n  }\r\n  \r\n  componentDidMount() {\r\n    const pricesWs = new WebSocket(`wss://ws.coincap.io/prices?assets=${ this.props.name.toLowerCase() }`);\r\n    let name = this.props.name.toLowerCase();\r\n     \r\n    pricesWs.onmessage = (msg) => {\r\n      let price = +JSON.parse(msg.data)[name];\r\n      \r\n      this.setState({\r\n        price: price.toFixed(6)\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const {\r\n      rank,\r\n      name,\r\n      capt,\r\n      volume,\r\n    } = this.props;\r\n  \r\n    return (\r\n      <tr className='table-body_row'>\r\n        <td className='table-body_item table_num'> { rank } </td>\r\n        <td className='table-body_item table_name'> { name } </td>\r\n        <td className='table-body_item table_price'> ${ this.state.price } </td>\r\n        <td className='table-body_item table_capt'> { capt } </td>\r\n        <td className='table-body_item table_vol'> { volume } </td>\r\n      </tr>\r\n    );\r\n  }\r\n        \r\n\r\n}\r\n\r\nexport default TabItem;\r\n","import React, { Component } from 'react';\r\nimport './Tab.css';\r\n\r\nimport TabItem from '../TabItem/TabItem';\r\n\r\nclass Tab extends Component {  \r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = {\r\n            data: []\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch('https://api.coincap.io/v2/assets')\r\n            .then((data) => data.json())\r\n            .then((cur) => {\r\n                let sortedCur = cur.data.sort((a,b) => Number(b.marketCapUsd) - Number(a.marketCapUsd));\r\n                this.setState({ data: sortedCur });\r\n            })\r\n            .catch((err) => console.log(err));\r\n    }\r\n    \r\n    roundNum(num) {\r\n        if (num/1e12>1) {\r\n            \r\n            return `$${ Math.round(( +num / 1e12 ) * 100) / 100 }tr`;\r\n            \r\n        } else if ( num / 1e9 > 1 ) {\r\n            \r\n            return `$${( +num / 1e9 ).toFixed( 2 )}b`;\r\n            \r\n        } else if ( num / 1e6 > 1 ) {\r\n            \r\n            return `$${( +num / 1e6 ).toFixed( 2 )}m`;\r\n            \r\n        } else if (num/1e3>1) {\r\n            \r\n            return `$${( +num / 1e3 ).toFixed( 2 )}k`;\r\n            \r\n        } \r\n    }\r\n    \r\n    render() {\r\n        let currency = this.state.data\r\n            .map((e, index) => {\r\n                return <TabItem rank={ e.rank }\r\n                    key={ index }\r\n                    name={ e.name }\r\n                    price={ (+e.priceUsd).toFixed(6) }\r\n                    capt={ this.roundNum(e.marketCapUsd) }\r\n                    volume={ this.roundNum(e.volumeUsd24Hr) }\r\n                />\r\n            });\r\n\r\n        return (\r\n          <table className=\"table\">\r\n              <thead className='table-head'>\r\n                <tr>\r\n                    <th className='table-header_item table_num'>#</th>\r\n                    <th className='table-header_item table_name'>Название</th>\r\n                    <th className='table-header_item table_price'>Стоимость</th>\r\n                    <th className='table-header_item table_capt'>Рыночная капитализация</th>\r\n                    <th className='table-header_item table_vol'>Суточный объем</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className='table-body'>\r\n                <div className='table-body_scroll'>\r\n                    { currency }\r\n                </div>    \r\n              </tbody>           \r\n          </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Table from './Components/Tab/Tab';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='table-holder'>\n          <Table />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}